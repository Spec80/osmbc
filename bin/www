#!/usr/bin/env node

/**
 * Module dependencies.
 */

var http    = require('http');
var async   = require('async');
var debug   = require('debug')('OSMBC:server');

var stoppable = require('stoppable');


var app     = require('../app');

var config  = require('../util/config.js');
var logger  = require('../util/config.js').logger;
var util    = require('../util/util.js');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.getServerPort());
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = stoppable(http.createServer(app));

/**
 * Listen on provided port, on all network interfaces.
 */
function initialiseServer() {
  debug('initialiseServer');
  util.initialiseModules(
    function(err){
      if (err) {
        logger.error(err);
        process.exit(1);
        return;
      }
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
      logger.info("Server Listening on port "+port);
    }
  );
}

process.on('SIGINT', function() {
  logger.info('Received a stoprequest (SIGINT)');
  server.stop();
  process.exit()
});


initialiseServer();





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
